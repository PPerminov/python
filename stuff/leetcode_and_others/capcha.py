#import time 
#capcha




#t=time.time()
#sum1=0
#prev=capcha[-1]

#length=len(capcha)

#for cap in range(length):
    #if capcha[cap] == prev:
        #sum1+=int(capcha[cap])
    #prev=capcha[cap]
    
#print("Capcha 1",sum1)

#print(time.time() -t)




#data1=[[4168,3925,858,2203,440,185,2886,160,1811,4272,4333,2180,174,157,361,1555],
#[150,111,188,130,98,673,408,632,771,585,191,92,622,158,537,142],
#[5785,5174,1304,3369,3891,131,141,5781,5543,4919,478,6585,116,520,673,112],
#[5900,173,5711,236,2920,177,3585,4735,2135,2122,5209,265,5889,233,4639,5572],
#[861,511,907,138,981,168,889,986,980,471,107,130,596,744,251,123],
#[2196,188,1245,145,1669,2444,656,234,1852,610,503,2180,551,2241,643,175],
#[2051,1518,1744,233,2155,139,658,159,1178,821,167,546,126,974,136,1946],
#[161,1438,3317,4996,4336,2170,130,4987,3323,178,174,4830,3737,4611,2655,2743],
#[3990,190,192,1630,1623,203,1139,2207,3994,1693,1468,1829,164,4391,3867,3036],
#[116,1668,1778,69,99,761,201,2013,837,1225,419,120,1920,1950,121,1831],
#[107,1006,92,807,1880,1420,36,1819,1039,1987,114,2028,1771,25,85,430],
#[5295,1204,242,479,273,2868,3453,6095,5324,6047,5143,293,3288,3037,184,987],
#[295,1988,197,2120,199,1856,181,232,564,1914,1691,210,1527,1731,1575,31],
#[191,53,714,745,89,899,854,679,45,81,726,801,72,338,95,417],
#[219,3933,6626,2137,3222,1637,5312,238,5895,222,154,6649,169,6438,3435,4183],
#[37,1069,166,1037,172,258,1071,90,497,1219,145,1206,143,153,1067,510]]

#data="""4168	3925	858	2203	440	185	2886	160	1811	4272	4333	2180	174	157	361	1555
#150	111	188	130	98	673	408	632	771	585	191	92	622	158	537	142
#5785	5174	1304	3369	3891	131	141	5781	5543	4919	478	6585	116	520	673	112
#5900	173	5711	236	2920	177	3585	4735	2135	2122	5209	265	5889	233	4639	5572
#861	511	907	138	981	168	889	986	980	471	107	130	596	744	251	123
#2196	188	1245	145	1669	2444	656	234	1852	610	503	2180	551	2241	643	175
#2051	1518	1744	233	2155	139	658	159	1178	821	167	546	126	974	136	1946
#161	1438	3317	4996	4336	2170	130	4987	3323	178	174	4830	3737	4611	2655	2743
#3990	190	192	1630	1623	203	1139	2207	3994	1693	1468	1829	164	4391	3867	3036
#116	1668	1778	69	99	761	201	2013	837	1225	419	120	1920	1950	121	1831
#107	1006	92	807	1880	1420	36	1819	1039	1987	114	2028	1771	25	85	430
#5295	1204	242	479	273	2868	3453	6095	5324	6047	5143	293	3288	3037	184	987
#295	1988	197	2120	199	1856	181	232	564	1914	1691	210	1527	1731	1575	31
#191	53	714	745	89	899	854	679	45	81	726	801	72	338	95	417
#219	3933	6626	2137	3222	1637	5312	238	5895	222	154	6649	169	6438	3435	4183
#37	1069	166	1037	172	258	1071	90	497	1219	145	1206	143	153	1067	510"""

#def initer(ar):
    #ret=[]
    #ar=ar.split('\t')
    #for item in ar:
        #ret.append(int(item))
    #return ret


#data=data.split('\n')
#data=list(map(initer,data))
#print(data)



#checksum=0
#for line in data:
    #mi=min(line)
    #ma=max(line)
    #dif=ma-mi
    #print(dif)
    #checksum+=dif
#print("Checksum:",checksum)

#array=0

#for line in data:
    
    #for item in line:
        #for i in line:
            #if item != i and item % i == 0 :
                #array+=int(item / i)

#print(array)



def steps(step):
    from math import sqrt
    level_fl=sqrt(step)
    level=int(level_fl)
    steps=0
    if level % 2 == 0:
        level+=1
    elif (level_fl > level):
        level+=2
    for _ in range(1,level,2):
        steps+=1
    #print(steps)
    prevlevel=level - 2
    start=(prevlevel*prevlevel)
    end=level*level
    side_size=(end - start)/4
    for i in range(1,5):
        cur_end = start + side_size
        #print(cur_end)
        if step == cur_end:
            position = cur_end
            break
        if  step < cur_end and step >= start :
            side=i
            count_start=start
            count_end=cur_end
            middle=int((count_start+count_end)/2)
            position_added=abs(middle - step)
        start=cur_end
    return (steps + position_added)
print(steps(289326))


def spiral_build(number,array=[[1,1]],position=(0,0)):
    def up(array,size, position, point):
        array.insert(0,[point])
        return array
    def down(array,size, position, point, pos=0,temp=[]):
        if pos == size:
            array.insert(len(array),temp)
            return array
        if pos == position:
            temp.append(position)
            return down(array,size, position, point, pos+1,temp)
        temp.append(0)
        return down(array,size, position, point, pos+1,temp)
    def left(array,row,point):
        array[row].insert(0,point)
    def right(array,row,point):
        array[row].insert(len(array[row],point))
    #def mapper(num,array):
        #current=count(array[0])
        #x=count(array[0])
        #y=count(array)
        
        #while True:
            #if not array[y][x]
                
    #def get_surrounders(array,position):
            #x=position[0]
            #y=position[1]
            #surrounders=[]
            #positions=((x-1,y),
                #(x+1,y),
                #(x-1,y-1),
                #(x,y-1),
                #(x+1,y-1),
                #(x-1,y+1),
                #(x,y+1),
                #(x+1,y+1))
            #for position in positions:
                #x=position[0]
                #y=position[1]
                #print(x,y)
                #if x < 0 or y < 0:
                    #continue
                #try:
                    #current=array[x][y]
                    #surrounders.append(current)
                #except:
                    #continue
            #return surrounders
    
    
    #if not array[row-1]:
        #array=up(array,)






drama=[ [101,100,99,98,97,96,95,94,93,92,91],
        [103,66,37,36,35,34,33,32,31,56,89],
        [104,67,38,17,16,15,14,13,30,55,88],
        [105,68,39,18,5,4,2,12,29,54,87],
        [106,69,40,19,6,1,1,11,28,53,86],
        [107,70,41,20,7,8,9,10,27,52,85],
        [108,71,42,21,22,23,24,25,26,51,84], 
        [109,72,43,44,45,46,47,48,49,50,83],
        [110,73,74,75,76,77,78,79,80,81,82],
        [111,112,113,114,115,116,117,118,119,120,121]]


def down(array,size, position, point, pos=0,temp=[]):
        if pos == size:
            array.insert(len(array),temp)
            return array
        if pos == position:
            temp.append(point)
            return down(array,size, position, point, pos+1,temp)
        temp.append(0)
        return down(array,size, position, point, pos+1,temp)

def right(array,position, point, pos=0):
    for i in range(len(array)):
        if i == position:
            array[i].append(point)
        else:
            array[i].append(0)
    return array

def mkarray(size):
    array=[]
    while size >0 :
        array.append(0)
        size-=1
    return array

def add_circle(array):
    import math
    cur=len(array[0])
    #if len(array[0]) -1 != cur:
        #return False
    last_point=array[len(array)-1][len(array[0])-1]
    new = cur
    new_line=mkarray(new+2)
    for i in range(len(array)):
        array[i].insert(0,0)
        array[i].insert(len(array[i]),0)
    array.insert(0,new_line)
    array.append(new_line)
    
    #whole_line=list(range(last_point + 1, int(pow(math.sqrt(last_point) + 2,2)) + 1 ))
    #denom=2
    #while True:
        #y=len(array) -  denom
        #x=
        #last_point+=1
        #array[y][x]=last_point
        
    return array
    print(last_point)
    
    
#print(add_circle(drama))
    
ar=add_circle(drama)

for i in ar:
    print(i)

ar[2][12]=65454851
print(ar)
